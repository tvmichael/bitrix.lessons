<?php
/**
 * Class.php - это зарезервированное имя файла, и этот файл автоматически подключается при вызове:
 * $APPLICATION->IncludeComponent()
*/
define("LOG_FILENAME", $_SERVER["DOCUMENT_ROOT"]."/test/log.txt");

if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true)
    die();

use Bitrix\Sale\Basket;
use Bitrix\Sale\Order;
use Bitrix\Sale\Fuser;
use Bitrix\Sale\Delivery\Services\Manager;
use Bitrix\Sale\PaySystem\Manager AS PayManager;
use Bitrix\Sale\BasketItem;

use \Bitrix\Main\Localization\Loc;
use \Bitrix\Main\Loader;
use Bitrix\Main\Diag;
use \Bitrix\Main\Context;


Loc::loadMessages(__FILE__);

Class CArhicodeBasketSale extends CBitrixComponent
{
    /**
     * @var \Bitrix\Sale\Order
     */
    public $order;
    public $basket;

    protected $errors = [];

    /**
     * arhicodeBasketSale constructor.
     * @param null $component
     * @throws \Bitrix\Main\LoaderException
     */
    function __construct($component = null)
    {
        //AddMessage2Log("__construct", "ArhicodeBasketSale");

        parent::__construct($component);

        if(!loader::includeModule('sale'))
            $this->errors[] = 'No sale module';

        if(!Loader::includeModule('catalog'))
            $this->errors[] = 'No catalog module';
    }

    /**
     * Підключаємо мовний файл
     */
    public function onIncludeComponentLang()
    {
        //AddMessage2Log("onIncludeComponentLang", "ArhicodeBasketSale");
        Loc::loadMessages(__FILE__);
    }

    /**
     * Метод обрабатывает параметры компонента. Нестатический метод.
     * Родительский метод проходит по всем параметрам переданным в $APPLICATION->IncludeComponent и применяет к ним функцию htmlspecialcharsex.
     * @param $arParams - Массив со значениями необработанных параметров компонента.
     * @return array
     */
    function onPrepareComponentParams($arParams)
    {
        //AddMessage2Log("onPrepareComponentParams", "ArhicodeBasketSale");
        if(isset($arParams['PERSON_TYPE_ID']) && intval($arParams['PERSON_TYPE_ID']) > 0)
            $arParams['PERSON_TYPE_ID'] = intval($arParams['PERSON_TYPE_ID']);
        else
            $arParams['PERSON_TYPE_ID'] = 1;



        //return parent::onPrepareComponentParams($arParams); // TODO: Change the autogenerated stub
        return $arParams;
    }

    protected function createVirtualOrder()
    {
        global $USER;

        try
        {
            //AddMessage2Log("createVirtualOrder", "ArhicodeBasketSale");

            $siteId = Context::getCurrent()->getSite();
            //$userId = $USER->GetID() ? $USER->GetID() : CSaleUser::GetAnonymousUserID();
            $userId = Fuser::getId();
            $this->basket = Basket::loadItemsForFUser($userId, $siteId);

            if(count($this->basket->getOrderableItems()) == 0) // якщо кошик пустий перехід на головну сторінку сайта, або на вказану в налаштуванні
                LocalRedirect('/personal/cart/'); // TODO - доробити, якщо кошик пустий

            // створюємо віртуальний заказ
            $this->order = Order::create($siteId, $userId);
            $this->order->setPersonTypeId($this->arParams['PERSON_TYPE_ID']);
            // приєднеємо до заказу поточний кошик
            $this->order->setBasket($this->basket);

            // встановлюємо значення властивостей (свойства) замовлення
            $this->setOrderProps();
        }
        catch (Exception $e)
        {
            $this->errors[] = $e->getMessage();
        }
    }

    /**
     * Додаємо властивості замовлення
     */
    protected function setOrderProps()
    {
        global $USER;
        $arUser = $USER->GetByID(Fuser::getId())->Fetch(); // поточний покупець

        if(is_array($arUser))
        {
            $fio = $arUser['LAST_NAME'];
        }

        $this->arResult['props'] = [];
        foreach ($this->order->getPropertyCollection() as $prop)
        {
            $value = '';
            switch ($prop->getField('CODE')) {
                case 'FIO':
                    $value = $this->request['contact']['family'];
                    $value .= ' ' . $this->request['contact']['name'];
                    $value .= ' ' . $this->request['contact']['second_name'];

                    $value = trim($value);
                    if (empty($value)) {
                        $value = $arUser['FIO'];
                    }
                    break;

                default:
            }

            if (empty($value)) {
                foreach ($this->request as $key => $val) {
                    if (strtolower($key) == strtolower($prop->getField('CODE'))) {
                        $value = $val;
                    }
                }
            }

            if (empty($value)) {
                $value = $prop->getProperty()['DEFAULT_VALUE'];
            }

            if (!empty($value)) {
                $prop->setValue($value);

                //$this->arResult['props'][] = $value;
            }
        }



    }

    /**
     * Отримати властивісті (свійства) для поточного замовлення
     */
    protected function getOrderProps()
    {
        try {
            $this->arResult['Price'] = $this->order->getPrice();// Цена с учетом скидок

            // Дані по кошику покупця
            $this->arResult['BasePrice'] = $this->basket->getBasePrice(); // Цена без учета скидок
            $this->arResult['QuantityList'] = $this->basket->getQuantityList(); // возвращает массив "количеств" товаров в корзине
            $this->arResult['ListOfFormatText'] = $this->basket->getListOfFormatText(); // возвращает корзину в читаемом виде


            // получение объекта корзины и массива товаров в корзине:
            // getBasketItems(); // все товары
            // getOrderableItems(); // только товары, доступные для заказа
            $arr = [];
            foreach ($this->basket->getBasketItems() as $items)
            {
                $arr[$items->getProductId()] = [
                    'id' => $items->getId(), // ID позиции корзины
                    'BasketCode' => $items->getBasketCode(), // код корзины
                    'Quantity' => $items->getQuantity(), // количество товара
                    'ProductId' => $items->getProductId(), // код товара
                    'FUserId' => $items->getFUserId(), // id владельца корзины
                    'canBuy' => $items->canBuy(), // товар доступен для покупки
                    'Currency' => $items->getCurrency(), // код валюты
                    'FinalPrice' => $items->getFinalPrice(), // стоимость всех единиц позиции товара
                    'Price' => $items->getPrice(), // цена с учетом скидок
                    'BasePrice' => $items->getBasePrice(), // цена без учета скидок
                    'DefaultPrice' => $items->getDefaultPrice(), // цена по умолчанию
                    'DiscountPrice' => $items->getDiscountPrice(), // величина скидки
                    'CustomPrice' => $items->isCustomPrice(), // цена указана вручную (без использования провайдера)
                    'AvailableFields' => $items->getAvailableFields(), //  массив кодов всех полей
                ];
            }
            $this->arResult['ProductList'] = $arr;

        } catch (Exception $e) {
            $this->errors[] = $e->getMessage();
        }
    }

    public function var1()
    {
        Diag\Debug::writeToFile($this->arResult, "var1:arResult", "test/log.txt");
        Diag\Debug::writeToFile($this->arParams, "var1:arParams", "test/log.txt");



        $products = array(
            array('PRODUCT_ID' => 11, 'NAME' => 'Товар Туфли', 'PRICE' => 500, 'CURRENCY' => 'RUB', 'QUANTITY' => 5)
        );

        // 1
        $basket = Basket::create(SITE_ID);
        foreach ($products as $product)
        {
            $item = $basket->createItem('catalog', $product['PRODUCT_ID']);
            unset($product['PRODUCT_ID']);
            $item->setFields($product);
        }

        // 2
        $order = Order::create(SITE_ID);
        $order->setPersonTypeId(1);
        $order->setBasket($basket);



        // 3
        $shipmentCollection = $order->getShipmentCollection();
        $shipment = $shipmentCollection->createItem(
            Manager::getObjectById(1)
        );

        $shipmentItemCollection = $shipment->getShipmentItemCollection();
        foreach ($basket as $basketItem)
        {
            $item = $shipmentItemCollection->createItem($basketItem);
            $item->setQuantity($basketItem->getQuantity());
        }

        // 4
        $paymentCollection = $order->getPaymentCollection();
        $payment = $paymentCollection->createItem(
            PayManager::getObjectById(1)
        );

        $payment->setField("SUM", $order->getPrice());
        $payment->setField("CURRENCY", $order->getCurrency());


        $result = $order->save();

        if ($result->isSuccess())
        {
            $arResult['result'] = ['Error'=>0, $result];
        }
        else
        {
            $arResult['result'] = ['Error'=>'$order->save()', $result];
        }
        /**/

        $arResult['var1'] = 'Method 1';
        $arResult['products'] = $products;
        $arResult['basket'] = $basket;
        return $arResult;
    }

    /**
     * Без файла component.php Для этого достаточно перекрыть метод executeComponent.
     * 1. запускается при выполнения компонента.
     * Данный метод, подключает шаблон.
    */
    public function executeComponent()
    {
        try
        {
            AddMessage2Log("executeComponent", "ArhicodeBasketSale");

            $this->createVirtualOrder();
            $this->getOrderProps();
            $this->arResult['errors'] = $this->errors;


            if (isset($this->request['save']) && $this->request['save'] == 'Y') {
                $this->order->save();
            }

            $this->includeComponentTemplate(); // эта конструкция подключает шаблон.
            return parent::executeComponent();
        }
        catch (SystemException $e)
        {
            ShowError($e->getMessage());
        }
    }
}
?>